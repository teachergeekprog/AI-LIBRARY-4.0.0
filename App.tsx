import React from 'react';
import { useState, useEffect } from 'react';
import type { Service } from './types';
import { defaultServices, CATEGORIES } from './constants';
import Header from './components/Header';
import Footer from './components/Footer';
import ServiceCard from './components/ServiceCard';
import CategoryFilter from './components/CategoryFilter';
import Modal from './components/Modal';
import LoadingSpinner from './components/icons/LoadingSpinner';
import FallingLeaves from './components/FallingLeaves';
import SupportModal from './components/SupportModal';
import ScrollToTopButton from './components/ScrollToTopButton';

type Theme = 'classic' | 'autumn';

const App: React.FC = () => {
  const [services, setServices] = useState<Service[]>(defaultServices);
  const [isLoading, setIsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [isSunoHelpVisible, setSunoHelpVisible] = useState(false);
  const [isChatGptHelpVisible, setChatGptHelpVisible] = useState(false);
  const [isNanoBananaHelpVisible, setNanoBananaHelpVisible] = useState(false);
  const [isSupportModalVisible, setSupportModalVisible] = useState(false);
  const [isScrollButtonVisible, setIsScrollButtonVisible] = useState(false);
  const [favoriteIds, setFavoriteIds] = useState<number[]>(() => {
    try {
      const storedFavorites = localStorage.getItem('ai_services_favorites');
      return storedFavorites ? JSON.parse(storedFavorites) : [];
    } catch (error) {
      console.error("Failed to parse favorites from localStorage", error);
      return [];
    }
  });
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window !== 'undefined') {
      const storedTheme = localStorage.getItem('theme');
      if (storedTheme === 'classic' || storedTheme === 'autumn') {
        return storedTheme;
      }
    }
    return 'classic'; // Default theme
  });

  const toggleTheme = () => {
    setTheme(prevTheme => (prevTheme === 'classic' ? 'autumn' : 'classic'));
  };

  useEffect(() => {
    const root = window.document.documentElement;
    if (theme === 'autumn') {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
  }, [theme]);

  useEffect(() => {
    try {
      localStorage.setItem('ai_services_favorites', JSON.stringify(favoriteIds));
    } catch (error) {
      console.error("Failed to save favorites to localStorage", error);
    }
  }, [favoriteIds]);

  useEffect(() => {
    setIsLoading(true);
    const timer = setTimeout(() => {
      let filtered = defaultServices.filter(s => s.active !== false);

      if (selectedCategory === 'Favorites') {
          filtered = filtered.filter(service => favoriteIds.includes(service.id));
      } else if (selectedCategory !== 'All') {
        filtered = filtered.filter(service => service.categories.includes(selectedCategory));
      }

      if (searchTerm.trim() !== '') {
        const lowercasedTerm = searchTerm.toLowerCase();
        filtered = filtered.filter(service =>
          service.name.toLowerCase().includes(lowercasedTerm) ||
          service.description.toLowerCase().includes(lowercasedTerm)
        );
      }

      setServices(filtered);
      setIsLoading(false);
    }, 300); // Simulate loading

    return () => clearTimeout(timer);
  }, [searchTerm, selectedCategory, favoriteIds]);
  
  useEffect(() => {
    const toggleVisibility = () => {
      if (window.pageYOffset > 300) {
        setIsScrollButtonVisible(true);
      } else {
        setIsScrollButtonVisible(false);
      }
    };

    window.addEventListener('scroll', toggleVisibility);

    return () => window.removeEventListener('scroll', toggleVisibility);
  }, []);

  const handleHelpClick = (serviceName: string) => {
    if (serviceName === 'Suno') {
      setSunoHelpVisible(true);
    } else if (serviceName === 'ChatGPT') {
      setChatGptHelpVisible(true);
    } else if (serviceName === 'Nano Banana') {
      setNanoBananaHelpVisible(true);
    }
  };

  const handleToggleFavorite = (id: number) => {
    setFavoriteIds(prevFavorites => {
      if (prevFavorites.includes(id)) {
        return prevFavorites.filter(favId => favId !== id);
      } else {
        return [...prevFavorites, id];
      }
    });
  };

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  return (
    <>
      {theme === 'autumn' && <FallingLeaves />}
      <div className="min-h-screen flex flex-col font-sans text-slate-200 bg-transparent relative z-10">
        <Header 
          theme={theme} 
          toggleTheme={toggleTheme} 
          onSupportClick={() => setSupportModalVisible(true)}
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
        />
        <main className="flex-grow w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-extrabold text-white dark:text-amber-50 sm:text-4xl">Explore AI Services</h2>
              <p className="mt-4 text-lg text-slate-400">Find the best AI tools for your creative and professional projects.</p>
            </div>

            <div className="sticky md:static top-16 bg-slate-900/60 dark:bg-stone-950/60 backdrop-blur-xl z-30 py-4 border-y border-slate-800 dark:border-amber-900 md:border-none md:py-0 md:bg-transparent dark:md:bg-transparent md:backdrop-blur-none">
                <CategoryFilter categories={CATEGORIES} selectedCategory={selectedCategory} onSelectCategory={setSelectedCategory} />
            </div>
            
            <div className="min-h-[400px]">
              {isLoading ? (
                <div className="flex justify-center items-center h-full py-16">
                  <LoadingSpinner className="w-12 h-12 text-sky-400 dark:text-orange-400" />
                </div>
              ) : services.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
                    {services.map(service => (
                        <ServiceCard 
                          key={service.id} 
                          service={service} 
                          onHelpClick={handleHelpClick}
                          isFavorite={favoriteIds.includes(service.id)}
                          onToggleFavorite={handleToggleFavorite}
                        />
                    ))}
                </div>
              ) : (
                <div className="text-center py-16">
                    <p className="text-xl text-slate-400">No services found. Try adjusting your search or filter.</p>
                </div>
              )}
            </div>
          </div>
        </main>
        <Footer />
        
        {/* Suno Help Modal */}
        <Modal isVisible={isSunoHelpVisible} onClose={() => setSunoHelpVisible(false)} title="Suno: –ü–æ—Ä–∞–¥–∏ —Ç–∞ –≥–∞–π–¥">
          <div className="space-y-4 text-sm">
              <h4 className="font-bold text-sky-500 dark:text-orange-400 text-lg">ü™ô –ü–æ—Ä–∞–¥–∏ –¥–ª—è –∫—Ä—É—Ç–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó</h4>
              <ul className="list-disc list-inside space-y-2 pl-2">
                <li><strong>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Å–ø—ñ–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç</strong> ‚Äî —è–∫—â–æ –≤–∞–∂–∫–æ, –≤–∏–π–¥–µ —Ä–µ–ø –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∂–∞–Ω—Ä—É.</li>
                <li><strong>–†–æ–±—ñ—Ç—å –∫—É–ø–ª–µ—Ç–∏ —Ç–∞ –ø—Ä–∏—Å–ø—ñ–≤ —Ä—ñ–∑–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É</strong> ‚Äî —Ç–∞–∫ Suno –ª–µ–≥—à–µ –∑—Ä–æ–±–∏—Ç—å –≥–∞—Ä–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥.</li>
                <li><strong>–ù–∞–≥–æ–ª–æ—Å–∏ ‚Äî —á–µ—Ä–µ–∑ –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É</strong>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ¬´—Ç—Ä–ï–±–∞¬ª –∞–±–æ ¬´—Ç—Ä–µ–±–Ø¬ª.</li>
                <li><strong>–î–æ–¥–∞–≤–∞–π—Ç–µ –±–µ–∫-–≤–æ–∫–∞–ª —É (–ª–∞–ø–∫–∞—Ö)</strong> ‚Äî —Ü–µ –ø—Ä–∞—Ü—é—î!</li>
                <li><strong>–ö–æ—Ä–∏–≥—É–π—Ç–µ –∂–∞–Ω—Ä:</strong> <em>Slow, Fast, Aggressive</em>, –∞–±–æ <em>With Female/Male vocals</em>.</li>
                <li><strong>–†–æ–∑–º—ñ—á–∞–π—Ç–µ –ø—ñ—Å–Ω—é:</strong> [Verse], [Chorus], [Bridge], [Guitar Solo], [Piano Solo].</li>
              </ul>

              <div className="tip bg-slate-800/50 dark:bg-stone-800/50 p-3 rounded-lg border border-slate-700 dark:border-stone-700">
                <div className="guide-title font-bold text-slate-200">üìå 1Ô∏è‚É£ –ë–∞–∑–∞:</div>
                <p>Suno V3 –≥–µ–Ω–µ—Ä—É—î –ø—ñ—Å–Ω—ñ –¥–æ 2 —Ö–≤–∏–ª–∏–Ω. –ö—Ä–∞—â–µ: –∑–∞–∫–∏–Ω—É—Ç–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´Continue from this song¬ª —ñ –≤–∏–¥–∞–ª—è—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ. –ü–æ—Ç—ñ–º ¬´Get Whole song¬ª –∑–±–µ—Ä–µ –≤—Å–µ –≤ –æ–¥–Ω—É –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é.</p>
              </div>

               <div className="tip bg-slate-800/50 dark:bg-stone-800/50 p-3 rounded-lg border border-slate-700 dark:border-stone-700">
                <div className="guide-title font-bold text-slate-200">üìå 2Ô∏è‚É£ –ú–µ—Ç–∞—Ç–µ–≥–∏:</div>
                <p>–û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:</p>
                <ul className="list-disc list-inside space-y-1 pl-2 mt-2">
                  <li>[Intro]</li>
                  <li>[Verse 1], [Verse 2]</li>
                  <li>[Pre-chorus]</li>
                  <li>[Chorus]</li>
                  <li>[Bridge]</li>
                  <li>[Guitar Solo], [Piano Solo]</li>
                  <li>[Outro], [Fade out], [End] ‚Äî –±–µ–∑ —Ü—å–æ–≥–æ –ø—ñ—Å–Ω—è –º–æ–∂–µ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏—Å—è</li>
                </ul>
              </div>

              <div className="tip bg-slate-800/50 dark:bg-stone-800/50 p-3 rounded-lg border border-slate-700 dark:border-stone-700">
                <div className="guide-title font-bold text-slate-200">üìå 5Ô∏è‚É£ –ë–µ–∫-–≤–æ–∫–∞–ª —Ç–∞ –º–µ–ª—ñ–∑–º–∏:</div>
                <p>–¢–µ–∫—Å—Ç —É <em>(–ª–∞–ø–∫–∞—Ö)</em> ‚Äî —Ü–µ –±–µ–∫-–≤–æ–∫–∞–ª. –î–ª—è –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è: –ø–∏—à—ñ—Ç—å (–∞-–∞-–∞-–æ-–æ-–æ).</p>
              </div>
          </div>
        </Modal>

        {/* ChatGPT Help Modal */}
        <Modal isVisible={isChatGptHelpVisible} onClose={() => setChatGptHelpVisible(false)} title="ChatGPT: –ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∏–Ω–≥—É">
          <div className="space-y-4 text-sm">
              <h4 className="font-bold text-sky-500 dark:text-orange-400 text-lg">üéØ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏</h4>
              <ul className="list-disc list-inside space-y-2 pl-2">
                <li><strong>–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ:</strong> –∑–∞–º—ñ—Å—Ç—å "–Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç" ‚Äî "–Ω–∞–ø–∏—à–∏ —Ä–µ–∫–ª–∞–º–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è Instagram –ø—Ä–æ –Ω–æ–≤–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω, 100 —Å–ª—ñ–≤, —Å—Ç–∏–ª—å: –º–æ–ª–æ–¥—ñ–∂–Ω–∏–π, –∑ –µ–º–æ–¥–∑—ñ".</li>
                <li><strong>–í–∫–∞–∂—ñ—Ç—å —Ä–æ–ª—å:</strong> "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –°–∫–ª–∞–¥–∏ –ø–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –±—Ä–µ–Ω–¥—É –∫–∞–≤–∏".</li>
                <li><strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ—Ç–∞—Ñ–æ—Ä–∏:</strong> "–ü–æ—è—Å–Ω–∏, —è–∫ –ø—Ä–∞—Ü—é—î –±–ª–æ–∫—á–µ–π–Ω, —è–∫—â–æ –± —è –±—É–≤ 5-—Ä—ñ—á–Ω–æ—é –¥–∏—Ç–∏–Ω–æ—é".</li>
                <li><strong>–†–æ–∑–±–∏–≤–∞–π—Ç–µ –Ω–∞ –∫—Ä–æ–∫–∏:</strong> "1. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π 5 —ñ–¥–µ–π –¥–ª—è –Ω–∞–∑–≤–∏. 2. –û–±–µ—Ä–∏ –Ω–∞–π–∫—Ä–∞—â—É. 3. –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å".</li>
              </ul>

              <div className="tip bg-slate-800/50 dark:bg-stone-800/50 p-3 rounded-lg border border-slate-700 dark:border-stone-700">
                <div className="guide-title font-bold text-slate-200">üìå 1Ô∏è‚É£ –°–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏:</div>
                <p>–ü–æ—á–∏–Ω–∞–π—Ç–µ –∑: "–¢–∏ ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ –≤ —Å—Ç–∏–ª—ñ [–æ–ø–∏—Å —Å—Ç–∏–ª—é]. –ó–±–µ—Ä—ñ–≥–∞–π —Ç–æ–Ω: [—Ç–æ–Ω]."</p>
              </div>
              
              <div className="tip bg-slate-800/50 dark:bg-stone-800/50 p-3 rounded-lg border border-slate-700 dark:border-stone-700">
                <div className="guide-title font-bold text-slate-200">üìå 5Ô∏è‚É£ –ù–∞–π–∫—Ä–∞—â—ñ —Ä–µ—Å—É—Ä—Å–∏:</div>
                <ul className="list-disc list-inside space-y-1 pl-2 mt-2">
                  <li><a href="https://flowgpt.com/" target="_blank" rel="noopener noreferrer" className="text-sky-400 hover:underline dark:text-orange-400">FlowGPT</a> ‚Äî –Ω–∞–π–±—ñ–ª—å—à–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤.</li>
                  <li><a href="https://www.awesomegptprompts.com/" target="_blank" rel="noopener noreferrer" className="text-sky-400 hover:underline dark:text-orange-400">Awesome GPT Prompts</a> ‚Äî 150+ –≥–æ—Ç–æ–≤–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤.</li>
                  <li><a href="https://writesonic.com/blog/chatgpt-prompts/" target="_blank" rel="noopener noreferrer" className="text-sky-400 hover:underline dark:text-orange-400">Writesonic</a> ‚Äî 215+ –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É.</li>
                  <li><a href="https://www.aiforwork.co/" target="_blank" rel="noopener noreferrer" className="text-sky-400 hover:underline dark:text-orange-400">AIforwork</a> ‚Äî 2000+ –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤.</li>
                </ul>
              </div>
          </div>
        </Modal>

        {/* Nano Banana Help Modal */}
        <Modal isVisible={isNanoBananaHelpVisible} onClose={() => setNanoBananaHelpVisible(false)} title="Nano Banana: –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≥–∞–π–¥">
          <div className="space-y-4 text-sm">
              <h4 className="font-bold text-sky-500 dark:text-orange-400 text-lg">–©–æ –≤–º—ñ—î Nano Banana</h4>
              <ol className="list-decimal list-inside space-y-3 pl-2">
                <li>
                  <strong>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ —Ç–µ–∫—Å—Ç—É</strong>
                  <p className="pl-4 mt-1 text-slate-400">–ú–æ–¥–µ–ª—å —Å—Ç–≤–æ—Ä—é—î —Ñ–æ—Ç–æ—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ—é –∫–æ–º–ø–æ–∑–∏—Ü—ñ—î—é, –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è–º —Ç–∞ —Ñ–æ–Ω–æ–º. –ì–æ–ª–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤–∞–≥–∞ ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: –ø–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–ø—ñ–∑–Ω–∞–≤–∞–Ω–∏–º —É —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ö.</p>
                  <div className="pl-4 mt-2 bg-slate-800/50 dark:bg-stone-800/50 p-2 rounded border border-slate-700 dark:border-stone-700">
                    <code className="text-xs text-slate-300">Prompt: "A character in cyberpunk armor standing in neon-lit Tokyo street at night"</code>
                  </div>
                </li>
                <li>
                  <strong>–õ–æ–∫–∞–ª—å–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞ –æ–ø–∏—Å–æ–º</strong>
                  <p className="pl-4 mt-1 text-slate-400">–ú–æ–¥–µ–ª—å –º–æ–∂–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ —Ñ–æ–Ω, –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä–Ω—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –∑–±–µ—Ä—ñ–≥—à–∏ –ø—Ä–∏ —Ü—å–æ–º—É –æ–±–ª–∏—á—á—è, –ø–æ–∑—É —Ç–∞ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.</p>
                  <div className="pl-4 mt-2 bg-slate-800/50 dark:bg-stone-800/50 p-2 rounded border border-slate-700 dark:border-stone-700">
                    <code className="text-xs text-slate-300">Prompt: "Same image, but replace the background with a desert and make the lighting warm"</code>
                  </div>
                </li>
                <li>
                  <strong>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∏–ª—ñ—Å—Ç–∏–∫–∏ —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—å</strong>
                  <p className="pl-4 mt-1 text-slate-400">–†–æ–∑—É–º—ñ—î —Å–∫–ª–∞–¥–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∏–ª—é –≤—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.</p>
                  <div className="pl-4 mt-2 bg-slate-800/50 dark:bg-stone-800/50 p-2 rounded border border-slate-700 dark:border-stone-700">
                    <code className="block text-xs text-slate-300">"Convert the entire scene into watercolor style"</code>
                    <code className="block text-xs text-slate-300">"Make it look like an 80s anime frame"</code>
                  </div>
                </li>
              </ol>

              <h4 className="font-bold text-sky-500 dark:text-orange-400 text-lg pt-2">–í—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —ñ–Ω—à–∏—Ö —Ä—ñ—à–µ–Ω—å</h4>
              <ul className="list-disc list-inside space-y-2 pl-2">
                <li><strong>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ:</strong> –î–æ—Å—Ç—É–ø–Ω–∞ –≤–∂–µ —É preview-–≤–µ—Ä—Å—ñ—ó.</li>
                <li><strong>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</strong> –î–æ 30 —Ä–∞–∑—ñ–≤ —à–≤–∏–¥—à–µ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –º–æ–¥–µ–ª—ñ Google (–∑–∞—Ç—Ä–∏–º–∫–∞).</li>
                <li><strong>–ü–∞–º'—è—Ç—å —ñ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü—ñ—è:</strong> –°—Ç–∞–±—ñ–ª—å–Ω—ñ –æ–±–ª–∏—á—á—è, –ø–æ–∑–∏, –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å—Ü–µ–Ω–∏ –¥–æ —Å—Ü–µ–Ω–∏.</li>
                <li><strong>–õ–µ–≥–∫—ñ—Å—Ç—å API-—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:</strong> –Ü–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Gemini SDK.</li>
              </ul>
          </div>
        </Modal>

        {/* Support Modal */}
        <SupportModal isVisible={isSupportModalVisible} onClose={() => setSupportModalVisible(false)} />

        <ScrollToTopButton isVisible={isScrollButtonVisible} onClick={scrollToTop} />
      </div>
    </>
  );
};

export default App;